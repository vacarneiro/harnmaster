{"version":3,"file":"keyboardControl.js","sources":["../../src/core/render/dom.ts","../../src/modules/keyboardControl.ts"],"sourcesContent":["export function addClass (\n    el: HTMLElement,\n    list: Array<string> | string = []\n): void {\n    if (!Array.isArray(list)) list = [list]\n\n    list.forEach(clz => (!el.classList.contains(clz) && el.classList.add(clz)))\n}\n\nexport function removeClass (\n    el: HTMLElement,\n    list: Array<string> | string = []\n): void {\n    if (!Array.isArray(list)) list = [list]\n\n    list.forEach(clz => (el.classList.contains(clz) && el.classList.remove(clz)))\n}\n\nexport function attachListener (\n    el: HTMLElement | Document | Window,\n    evtName: string,\n    handler: EventListenerOrEventListenerObject,\n    opts?: boolean | AddEventListenerOptions\n): void {\n    el.addEventListener(evtName, handler, opts)\n}\n\nexport function detachListener (\n    el: HTMLElement | Document | Window,\n    evtName: string,\n    handler: EventListenerOrEventListenerObject\n): void {\n    el.removeEventListener(evtName, handler)\n}\n\nexport function removeAttr (\n    el: HTMLElement,\n    attr: string\n): void {\n    el.removeAttribute(attr)\n}\n\nexport function setAttr (\n    el: HTMLElement,\n    attr: string,\n    value = ''\n): HTMLElement {\n    el.setAttribute(attr, value)\n    return el\n}\n\nexport function setStyle (\n    el: HTMLElement,\n    style: {[key: string]: string},\n    forceRender?: boolean\n): HTMLElement {\n    Object.keys(style).forEach(prop => {\n        // TS7015: Element implicitly has an 'any' type because index expression is not of type 'number'.\n        el.style[prop as any] = style[prop]\n    })\n    // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n    forceRender && getComputedStyle(el)\n\n    return el\n}\n\nexport function getTranslate (\n    el: HTMLElement,\n    isHorizontal: boolean\n): number {\n    const matrix = getComputedStyle(el).transform.replace(/[a-z]|\\(|\\)|\\s/g, '').split(',').map(parseFloat)\n    let arr: Array<number> = []\n\n    if (matrix.length === 16) {\n        arr = matrix.slice(12, 14)\n    } else if (matrix.length === 6) {\n        arr = matrix.slice(4, 6)\n    }\n    return (<Array<number>>arr)[isHorizontal ? 0 : 1] || 0\n}\n\nexport function stringToElement (\n    string: string\n): HTMLElement {\n    const wrapper = document.createElement('div')\n    wrapper.innerHTML = string\n    return wrapper.firstChild as HTMLElement\n}\n","import {\n    attachListener,\n    detachListener\n} from '../core/render/dom'\nimport { SwiperInstance, SwiperPlugin } from '../core/index'\nimport { Options } from '../core/options'\n\nexport type SwiperPluginKeyboardControlOptions = {\n    enabled: boolean\n    onlyInViewport: boolean\n}\n\nexport type SwiperPluginKeyboardControlPartialOptions = Partial<SwiperPluginKeyboardControlOptions> | boolean\n\nexport type SwiperPluginKeyboardInstance = {\n    onKeyDown (e: Event): void\n    enable (): void\n    disable (): void\n}\n\nconst DIRECTION = {\n    up: 'ArrowUp',\n    right: 'ArrowRight',\n    down: 'ArrowDown',\n    left: 'ArrowLeft'\n}\n\n// TODO: optimize\nfunction isVisible (el: HTMLElement): boolean {\n    if (!el) return false\n\n    const style = getComputedStyle(el)\n    const visible = style.visibility !== 'hidden' && style.display !== 'none'\n\n    if (!visible) return false\n\n    return el.parentElement && el.parentElement.nodeType === 1\n        ? isVisible(el.parentElement)\n        : true\n}\n\nfunction isElementInView (el: HTMLElement): boolean {\n    const visibility = isVisible(el)\n    const boundary = el.getBoundingClientRect()\n    const isInView = (boundary.top >= 0 && boundary.bottom <= window.innerHeight)\n        && (boundary.left >= 0 && boundary.right <= window.innerWidth)\n\n    return isInView && visibility\n}\n\n/**\n * TinySwiper plugin for keyboard control.\n *\n * @param {SwiperInstance} instance\n * @param {Options}\n */\nexport default <SwiperPlugin>function SwiperPluginKeyboardControl (\n    instance: SwiperInstance & {\n        keyboard?: SwiperPluginKeyboardInstance\n    },\n    options: Options\n): void {\n    const isEnable = Boolean(options.keyboard)\n    const keyboardOptions = <SwiperPluginKeyboardControlOptions>Object.assign({\n        enabled: true,\n        onlyInViewport: true\n    }, options.keyboard)\n    const keyboard: SwiperPluginKeyboardInstance = {\n        enable (): void {\n            keyboardOptions.enabled = true\n        },\n        disable (): void {\n            keyboardOptions.enabled = false\n        },\n        onKeyDown (e: KeyboardEvent): void {\n            const { key } = e\n\n            if ((keyboardOptions.onlyInViewport && !isElementInView(instance.env.element.$el))\n                || !keyboardOptions.enabled) return\n\n            if (options.isHorizontal) {\n                if (key === DIRECTION.left) {\n                    instance.slideTo(instance.state.index - 1)\n                } else if (key === DIRECTION.right) {\n                    instance.slideTo(instance.state.index + 1)\n                }\n            } else {\n                if (key === DIRECTION.down) {\n                    instance.slideTo(instance.state.index - 1)\n                } else if (key === DIRECTION.up) {\n                    instance.slideTo(instance.state.index + 1)\n                }\n            }\n        }\n    }\n\n    if (!isEnable) return\n\n    instance.on('before-init', () => {\n        instance.keyboard = keyboard\n\n        attachListener(window, 'keydown', keyboard.onKeyDown as EventListener)\n    })\n\n    instance.on('after-destroy', () => {\n        if (instance!.keyboard) {\n            detachListener(window, 'keydown', keyboard.onKeyDown as EventListener)\n\n            delete instance.keyboard\n        }\n    })\n}\n"],"names":["attachListener","el","evtName","handler","opts","addEventListener","detachListener","removeEventListener","DIRECTION","up","right","down","left","isVisible","style","getComputedStyle","visible","visibility","display","parentElement","nodeType","isElementInView","boundary","getBoundingClientRect","isInView","top","bottom","window","innerHeight","innerWidth","SwiperPluginKeyboardControl","instance","options","isEnable","Boolean","keyboard","keyboardOptions","Object","assign","enabled","onlyInViewport","enable","disable","onKeyDown","e","key","env","element","$el","isHorizontal","slideTo","state","index","on"],"mappings":"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"}